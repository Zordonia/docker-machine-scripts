#!/usr/local/bin/python

import argparse
import yaml
import pprint
import itertools

parser = argparse.ArgumentParser(description='Parse cloud config templates.')

parser.add_argument(
    'template',
    default=None,
    type=str,
    help='The template that you would like to retrieve information about.')

parser.add_argument(
    'properties',
    default=[],
    nargs='+',
    type=str,
    help='The properties you would like to view.')

parser.add_argument(
    '--services',
    default=[],
    nargs='*',
    type=str,
    help='The services you would like to view.')

pprinter = pprint.PrettyPrinter(indent=4)

args = parser.parse_args()

links = []


def get_properties(service, properties):
    """
    Parses the content of a coreos unit.
    """
    prop_lists = [p.split('.') for p in properties]
    values = []

    for prop in prop_lists:
        value = service.get('properties', {})
        for p_key in prop:
            value = value.get(p_key, {})
        values.append({'key': '.'.join(prop),
                       'value': value,
                       'service': service.get('name', None),
                       'pod': service.get('pod', None)
                       })
    return values


print('Opening template: {0}'.format(args.template))
with open(args.template, 'r') as stream:
    template = yaml.load(stream)

    pods = template.get('input_vars', {}).get('pods', {})
    for name, pod in pods.iteritems():
        for _, service in pod.get('services', []).iteritems():
            service.update(pod=name)
    services = [value.get('services', []) for key, value in pods.iteritems()]
    services = [[{'name': k, 'properties': v, 'pod': v.get('pod', None)}
                for k, v in value.iteritems()]
                for value in services]
    services = list(itertools.chain(*services))
    if args.services:
        services = filter(lambda s: s.get('name', None) in args.services,
                          services)

    properties = [get_properties(service, args.properties)
                  for service in services]
    pprinter.pprint(properties)
